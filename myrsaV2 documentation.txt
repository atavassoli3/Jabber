myrsaV2class documentation
by Carla Jacobsen

for CPSC 452 Spring 2021 Final Project

class name: myrsaV2class

importing: from myrsaV2.py import myrsaV2class

global variables: BLOCK_SIZE: the size of the block to encrypt or decrypt


# default constructor
    def __init__(self):
        self.key = None   #the symmetric key
        self.pubKey = None
        self.privKey = None
        self.keypair = (self.pubKey, self.privKey)
        # The maximum key size
        self.KEY_SIZE = 512

key: the symmetric key
pubKey: the public key
privKey: the private key
keypair: the pair of the public key and the private key
KEY_SIZE: the size of the key

Member functions: 

def setKey(self, key): sets the self.key to the value of key

def generateKey(self): generates a symmetric key and returns it to the caller
			also stores this key in self.key

def setPrivKey(self, privKey): sets the self.privKey equal to privKey
       
def setPubKey(self, pubKey): sets the self.pubKey equal to pubKey

def storeKeyPair(self):		generates a public/private key pair
				prepares for file i/o

def loadKeyPair(self):		creates .pem files for each client's public and private key
				uses RSA to import the keys
				sets the self.pubKey equal to pubKey and sets the self.privKey equal to privKey
				can be made to return the (self.pubKey, self.privKey) (this is commented out)

def encrypt(self, plaintext):	encrypts the plaintext block by block using RSA amd the symmetric key
				returns the encrypted ciphertext

def encKey(self, plainKey):	encrypts the symmetric key using the public key and RSA
				returns the encrypted cipherKey

def decKey(self, cipherKey):	decrypts the encrypted symmetric key (cipherkey) using the private key and RSA
				returns the decrypted plainKey to the caller

def decrypt(self, ciphertext):	decrypts the encrypted ciphertext block by block using the symmetric key and RSA
				returns the decrypted plaintext